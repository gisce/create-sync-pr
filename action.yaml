name: "Create sync PR"
description: "Create PR that syncs between two branches"
inputs:
  repository:
    description: "Repository (e.g., gisce/react-ooui)"
    required: true
  baseBranch:
    description: "Base branch (e.g., main)"
    required: true
  targetBranch:
    description: "Target branch (e.g., alpha)"
    required: true
  githubToken:
    description: "GitHub token for authentication"
    required: true
  releaseType:
    description: "Type of release (e.g., minor, major, patch)"
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.targetBranch }}
        fetch-depth: 0

    - name: Configure Git
      shell: bash
      run: |
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Create sync branch and merge
      shell: bash
      run: |
        # Create sync branch from current position
        sync_branch="sync/${{ inputs.baseBranch }}-to-${{ inputs.targetBranch }}-$(date +%Y%m%d-%H%M%S)"
        echo "SYNC_BRANCH=$sync_branch" >> $GITHUB_ENV

        # Fetch all branches
        git fetch origin --unshallow || true
        git fetch origin ${{ inputs.baseBranch }}

        echo "Creating sync branch $sync_branch from ${{ inputs.targetBranch }}"
        # Create and checkout the sync branch FROM targetBranch
        git checkout ${{ inputs.targetBranch }}
        git checkout -b $sync_branch

        # Store current commit for comparison
        BEFORE_MERGE=$(git rev-parse HEAD)

        # Get the tree hash before merge
        BEFORE_TREE=$(git rev-parse HEAD^{tree})

        echo "Current branch for merge: $(git branch --show-current)"

        # First try a dry-run merge to detect conflicts
        if git merge-tree $(git merge-base HEAD origin/${{ inputs.baseBranch }}) HEAD origin/${{ inputs.baseBranch }} | grep -q "^<<<<<<< "; then
          echo "CONFLICTS=true" >> $GITHUB_ENV
        fi

        echo "Merging ${{ inputs.baseBranch }} into sync branch"
        # Perform the actual merge with conflict resolution
        git merge origin/${{ inputs.baseBranch }} -X theirs --no-edit --no-verify

        # Get the tree hash after merge
        AFTER_TREE=$(git rev-parse HEAD^{tree})

        # Check if the actual content changed
        if [ "$BEFORE_TREE" = "$AFTER_TREE" ]; then
          echo "No changes from merge - branches are already in sync"
          echo "HAS_CHANGES=false" >> $GITHUB_ENV
          exit 0
        else
          echo "Changes detected from merge - continuing with PR creation"
          echo "HAS_CHANGES=true" >> $GITHUB_ENV
        fi

    - name: Push sync branch
      if: env.HAS_CHANGES == 'true'
      shell: bash
      run: |
        echo "Pushing branch: ${{ env.SYNC_BRANCH }}"
        echo "Current git status:"
        git status
        echo "Current branch:"
        git branch --show-current
        echo "Commits to be pushed:"
        git log origin/${{ inputs.targetBranch }}..HEAD --oneline
        echo "Attempting push with tags..."
        git push origin ${{ env.SYNC_BRANCH }} --tags -v

    - name: Determine Commit Message
      if: env.HAS_CHANGES == 'true'
      id: commit-message
      run: |
        RELEASE_TYPE=${{ inputs.releaseType }}
        if [[ "$RELEASE_TYPE" == "patch" ]]; then
          PREFIX="fix"
        elif [[ "$RELEASE_TYPE" == "minor" ]]; then
          PREFIX="feat"
        elif [[ "$RELEASE_TYPE" == "major" ]]; then
          PREFIX="feat"
          BREAKING_CHANGE="BREAKING CHANGE: bump major version"
          echo "BREAKING_CHANGE=$BREAKING_CHANGE" >> $GITHUB_ENV
        elif [[ "$RELEASE_TYPE" == "none" ]]; then
          PREFIX="chore"
        fi
        echo "PREFIX=$PREFIX" >> $GITHUB_ENV
      shell: bash

    - name: Install GitHub CLI
      if: env.HAS_CHANGES == 'true'
      shell: bash
      run: |
        type -p curl >/dev/null || (apt update && apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && apt update \
        && apt install gh -y

    - name: Create Pull Request
      if: env.HAS_CHANGES == 'true'
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.githubToken }}
      run: |
        # Prepare PR title and body
        PR_TITLE="${{ env.PREFIX }}: sync changes from ${{ inputs.baseBranch }} to ${{ inputs.targetBranch }}${{ env.CONFLICTS == 'true' && ' (ðŸš¨ CONFLICTS RESOLVED)' || '' }}"

        if [[ "${{ env.CONFLICTS }}" == "true" ]]; then
          PR_BODY="This PR syncs changes from the ${{ inputs.baseBranch }} branch to ${{ inputs.targetBranch }}.

        ðŸš¨ **BE CAREFUL BEFORE MERGING**
        There were conflicts that were automatically resolved using changes from base branch."
        else
          PR_BODY="This PR syncs changes from the ${{ inputs.baseBranch }} branch to ${{ inputs.targetBranch }}."
        fi

        # Create PR using gh cli
        gh pr create \
          --title "$PR_TITLE" \
          --body "$PR_BODY" \
          --base "${{ inputs.targetBranch }}" \
          --head "${{ env.SYNC_BRANCH }}" \
          --repo "${{ inputs.repository }}"