name: "Create sync PR"
description: "Create PR that syncs between two branches"
inputs:
  repository:
    description: "Repository (e.g., gisce/react-ooui)"
    required: true
  baseBranch:
    description: "Base branch (e.g., main)"
    required: true
  targetBranch:
    description: "Target branch (e.g., alpha)"
    required: true
  githubToken:
    description: "GitHub token for authentication"
    required: true
  releaseType:
    description: "Type of release (e.g., minor, major, patch)"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ inputs.targetBranch }}

    - name: Configure Git
      shell: bash
      run: |
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Create sync branch and merge
      shell: bash
      run: |
        git fetch origin

        # Create sync branch from current position
        sync_branch="sync/${{ inputs.baseBranch }}-to-${{ inputs.targetBranch }}-$(date +%Y%m%d-%H%M%S)"
        echo "SYNC_BRANCH=$sync_branch" >> $GITHUB_ENV

        # First try a dry-run merge to detect conflicts
        if git merge-tree $(git merge-base HEAD origin/${{ inputs.baseBranch }}) HEAD origin/${{ inputs.baseBranch }} | grep -q "^<<<<<<< "; then
          echo "CONFLICTS=true" >> $GITHUB_ENV
        fi

        # Perform the actual merge with conflict resolution
        git merge origin/${{ inputs.baseBranch }} -X theirs --no-edit --no-verify --no-commit

        # Check if there are any changes to commit
        if [ -z "$(git status --porcelain)" ]; then
          echo "No changes to sync - working tree clean"
          exit 0
        fi

    - name: Determine Commit Message
      id: commit-message
      run: |
        RELEASE_TYPE=${{ inputs.releaseType }}
        if [[ "$RELEASE_TYPE" == "patch" ]]; then
          PREFIX="fix"
        elif [[ "$RELEASE_TYPE" == "minor" ]]; then
          PREFIX="feat"
        elif [[ "$RELEASE_TYPE" == "major" ]]; then
          PREFIX="feat"
          BREAKING_CHANGE="BREAKING CHANGE: bump major version"
          echo "BREAKING_CHANGE=$BREAKING_CHANGE" >> $GITHUB_ENV
        elif [[ "$RELEASE_TYPE" == "none" ]]; then
          PREFIX="chore"
        fi
        echo "PREFIX=$PREFIX" >> $GITHUB_ENV
      shell: bash

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ inputs.githubToken }}
        title: "${{ env.PREFIX }}: sync changes from ${{ inputs.baseBranch }} to ${{ inputs.targetBranch }}${{ env.CONFLICTS == 'true' && ' (ðŸš¨ CONFLICTS RESOLVED)' || '' }}"
        body: |
          This PR syncs changes from the ${{ inputs.baseBranch }} branch to ${{ inputs.targetBranch }}.

          ${{ env.CONFLICTS == 'true' && '# ðŸš¨ **BE CAREFUL BEFORE MERGING**
          There were conflicts that were automatically resolved using changes from base branch.' || '' }}
        commit-message: |
          ${{ env.PREFIX }}: sync changes from ${{ inputs.baseBranch }} to ${{ inputs.targetBranch }}

          ${{ env.BREAKING_CHANGE }}
        branch: ${{ env.SYNC_BRANCH }}